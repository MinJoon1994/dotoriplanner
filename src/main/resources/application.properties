# ================================
# \u2705 \uAE30\uBCF8 \uC11C\uBC84 \uC124\uC815
# ================================

# \uC11C\uBC84 \uD3EC\uD2B8
server.port=8082

# \uC694\uCCAD/\uC751\uB2F5 \uBB38\uC790 \uC778\uCF54\uB529 \uC124\uC815
server.servlet.encoding.charset=UTF-8
server.servlet.encoding.enabled=true
server.servlet.encoding.force=true

# ================================
# \u2705 \uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uC124\uC815 (MySQL)
# ================================

# MySQL JDBC \uB4DC\uB77C\uC774\uBC84
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# \uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uC5F0\uACB0 URL
spring.datasource.url=jdbc:mysql://localhost:3306/dotori_planner?serverTimezone=Asia/Seoul&useSSL=false

# MySQL \uC0AC\uC6A9\uC790\uBA85 \uBC0F \uBE44\uBC00\uBC88\uD638
spring.datasource.username=dotori
spring.datasource.password=1111

# Hibernate\uC5D0\uC11C \uC0AC\uC6A9\uD560 MySQL 8 Dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# ================================
# \u2705 JPA / Hibernate \uC124\uC815
# ================================

# \uD14C\uC774\uBE14 \uC790\uB3D9 \uC0DD\uC131/\uC5C5\uB370\uC774\uD2B8 \uC124\uC815 (create, update, validate, none)
spring.jpa.hibernate.ddl-auto=update

# \uC2E4\uD589\uB418\uB294 SQL \uB85C\uADF8 \uCD9C\uB825
spring.jpa.show-sql=true

# SQL \uB85C\uADF8 \uD3EC\uB9F7\uD305
spring.jpa.properties.hibernate.format_sql=true

# ================================
# \u2705 Thymeleaf \uC124\uC815
# ================================

# \uAC1C\uBC1C \uC911 \uD15C\uD50C\uB9BF \uCE90\uC2F1 \uBE44\uD65C\uC131\uD654
spring.thymeleaf.cache=false

# \uD15C\uD50C\uB9BF \uC704\uCE58 (resources/templates/)
spring.thymeleaf.prefix=classpath:/templates/

# \uD15C\uD50C\uB9BF \uD30C\uC77C \uD655\uC7A5\uC790
spring.thymeleaf.suffix=.html

# Thymeleaf \uCC98\uB9AC \uBAA8\uB4DC
spring.thymeleaf.mode=HTML

# \uD15C\uD50C\uB9BF \uBB38\uC790 \uC778\uCF54\uB529
spring.thymeleaf.encoding=UTF-8

# ================================
# \u2705 Hibernate SQL \uB85C\uADF8 \uC0C1\uC138 \uC124\uC815
# ================================

# \uC2E4\uD589\uB418\uB294 SQL \uCD9C\uB825 (Hibernate)
logging.level.org.hibernate.SQL=debug

# \uD30C\uB77C\uBBF8\uD130 \uBC14\uC778\uB529 \uC815\uBCF4\uAE4C\uC9C0 \uCD9C\uB825
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=trace

# ================================
# \u2705 \uC678\uBD80 \uC124\uC815 \uD30C\uC77C import (\uC120\uD0DD)
# ================================

# OAuth \uAD00\uB828 \uCD94\uAC00 \uC124\uC815 \uD30C\uC77C(optional)
spring.config.import=optional:classpath:application-oauth.properties

# ================================
# \u2705 OAuth2 - Kakao \uC124\uC815
# ================================

spring.security.oauth2.client.registration.kakao.client-name=Kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,account_email,profile_image
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id

# ================================
# \u2705 OAuth2 - Naver \uC124\uC815
# ================================

spring.security.oauth2.client.registration.naver.client-name=Naver
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.naver.scope=name,email,nickname,profile_image,gender,birthday
spring.security.oauth2.client.registration.naver.client-authentication-method=client_secret_post
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

# ================================
# \u2705 OAuth2 - Google \uC124\uC815
# ================================

spring.security.oauth2.client.registration.google.client-name=Google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# \uD398\uC774\uC9C0\uB124\uC774\uC158
spring.data.web.pageable.default-page-size=10
spring.data.web.pageable.max-page-size=100
